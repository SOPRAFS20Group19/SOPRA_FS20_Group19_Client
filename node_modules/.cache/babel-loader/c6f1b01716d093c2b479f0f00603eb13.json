{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/src/views/Header.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  font-weight: bold;\\n  color: white;\\n  text-align: center;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  height: \", \"px;\\n  background: \", \";\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { ReactLogo } from \"./ReactLogo\";\n/**\n * Using styled-components you can visual HTML primitives and use props with it!\n * The idea behind this external package, it's to have a better structure and overview for your HTML and CSS\n * Using styled-components, you can have styling conditions using the following syntax: ${props => ...}\n * https://www.styled-components.com/\n */\n\nvar Container = styled.div(_templateObject(), function (props) {\n  return props.height;\n}, function (props) {\n  return props.background;\n});\nvar Title = styled.h1(_templateObject2());\n/**\n * This is an example of a Functional and stateless component (View) in React. Functional components are not classes and thus don't handle internal state changes.\n * Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.\n * They are reusable pieces, and think about each piece in isolation.\n * Functional components have to return always something. However, they don't need a \"render()\" method.\n * https://reactjs.org/docs/components-and-props.html\n * @FunctionalComponent\n */\n\nvar Header = function Header(props) {\n  return React.createElement(Container, {\n    height: props.height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"SoPra FS20 rocks with React!\"), React.createElement(ReactLogo, {\n    width: 60,\n    height: 60,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }));\n};\n/**\n * Don't forget to export your component!\n */\n\n\nexport default Header;","map":{"version":3,"sources":["/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/src/views/Header.js"],"names":["React","styled","ReactLogo","Container","div","props","height","background","Title","h1","Header"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA;;;;;;;AAMA,IAAMC,SAAS,GAAGF,MAAM,CAACG,GAAV,oBACH,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,MAAV;AAAA,CADF,EAEC,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACE,UAAV;AAAA,CAFN,CAAf;AAQA,IAAMC,KAAK,GAAGP,MAAM,CAACQ,EAAV,oBAAX;AAKA;;;;;;;;;AAQA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAL,KAAK,EAAI;AACtB,SACE,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAEA,KAAK,CAACC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF,EAEE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE,EAAlB;AAAsB,IAAA,MAAM,EAAE,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAPD;AASA;;;;;AAGA,eAAeI,MAAf","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { ReactLogo } from \"./ReactLogo\";\n\n/**\n * Using styled-components you can visual HTML primitives and use props with it!\n * The idea behind this external package, it's to have a better structure and overview for your HTML and CSS\n * Using styled-components, you can have styling conditions using the following syntax: ${props => ...}\n * https://www.styled-components.com/\n */\nconst Container = styled.div`\n  height: ${props => props.height}px;\n  background: ${props => props.background};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Title = styled.h1`\n  font-weight: bold;\n  color: white;\n  text-align: center;\n`;\n/**\n * This is an example of a Functional and stateless component (View) in React. Functional components are not classes and thus don't handle internal state changes.\n * Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.\n * They are reusable pieces, and think about each piece in isolation.\n * Functional components have to return always something. However, they don't need a \"render()\" method.\n * https://reactjs.org/docs/components-and-props.html\n * @FunctionalComponent\n */\nconst Header = props => {\n  return (\n    <Container height={props.height}>\n      <Title>SoPra FS20 rocks with React!</Title>\n      <ReactLogo width={60} height={60} />\n    </Container>\n  );\n};\n\n/**\n * Don't forget to export your component!\n */\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}