{"ast":null,"code":"import _defineProperty from \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/src/components/login/Login.js\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  margin-top: 20px;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  color: white;\\n  margin-bottom: 10px;\\n  text-transform: uppercase;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  &::placeholder {\\n    color: rgba(255, 255, 255, 1.0);\\n  }\\n  height: 35px;\\n  padding-left: 15px;\\n  margin-left: -4px;\\n  border: none;\\n  border-radius: 20px;\\n  margin-bottom: 20px;\\n  background: rgba(255, 255, 255, 0.2);\\n  color: white;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 60%;\\n  height: 400px;\\n  font-size: 16px;\\n  font-weight: 300;\\n  padding-left: 37px;\\n  padding-right: 37px;\\n  border-radius: 5px;\\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\\n  transition: opacity 0.5s ease, transform 0.5s ease;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: 2em;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  min-height: 300px;\\n  justify-content: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { BaseContainer } from '../../helpers/layout';\nimport { api, handleError } from '../../helpers/api';\nimport User from '../shared/models/User'; //import Game from \"../game/Game\";\n\nimport { withRouter } from 'react-router-dom';\nimport { Button } from '../../views/design/Button';\nvar FormContainer = styled.div(_templateObject());\nvar Form = styled.div(_templateObject2());\nvar InputField = styled.input(_templateObject3());\nvar Label = styled.label(_templateObject4());\nvar ButtonContainer = styled.div(_templateObject5());\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\n\nvar Login =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Login, _React$Component);\n\n  /**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n    _this.state = {\n      name: null,\n      username: null,\n      password: null,\n      loggedInUser: null\n    };\n    return _this;\n  }\n  /**\n   * HTTP POST request is sent to the backend.\n   * If the request is successful, a new user is returned to the front-end\n   * and its token is stored in the localStorage.\n   */\n\n\n  _createClass(Login, [{\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var requestBody, response, user;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                requestBody = JSON.stringify({\n                  name: this.state.name,\n                  username: this.state.username,\n                  password: this.state.password\n                });\n                _context.next = 4;\n                return api.post('/login', requestBody);\n\n              case 4:\n                response = _context.sent;\n                // Get the returned user and update a new object.\n                user = new User(response.data); // Store the token into the local storage.\n\n                localStorage.setItem('token', user.token);\n                localStorage.setItem('userId', user.id); // Login successfully worked --> navigate to the route /game in the GameRouter\n\n                this.props.history.push(\"/game\");\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](0);\n                alert(\"Something went wrong during the login: \\n\".concat(handleError(_context.t0)));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 11]]);\n      }));\n\n      function login() {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     *  Every time the user enters something in the input field, the state gets updated.\n     * @param key (the key of the state for identifying the field that needs to be updated)\n     * @param value (the value that gets assigned to the identified state key)\n     */\n\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(key, value) {\n      // Example: if the key is username, this statement is the equivalent to the following one:\n      // this.setState({'username': value});\n      this.setState(_defineProperty({}, key, value));\n    }\n    /**\n     * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n     * Initialization that requires DOM nodes should go here.\n     * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n     * You may call setState() immediately in componentDidMount().\n     * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(BaseContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(FormContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Username\"), React.createElement(InputField, {\n        placeholder: \"Enter here..\",\n        onChange: function onChange(e) {\n          _this2.handleInputChange('username', e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Name\"), React.createElement(InputField, {\n        placeholder: \"Enter here..\",\n        onChange: function onChange(e) {\n          _this2.handleInputChange('name', e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Password\"), React.createElement(InputField, {\n        placeholder: \"Enter here..\",\n        onChange: function onChange(e) {\n          _this2.handleInputChange('password', e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(ButtonContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(Button, {\n        disabled: !this.state.username || !this.state.password,\n        width: \"50%\",\n        onClick: function onClick() {\n          _this2.login();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Login\")), React.createElement(ButtonContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(Button, {\n        width: \"50%\",\n        onClick: function onClick() {\n          _this2.props.history.push(\"/registration\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Register here!\")))));\n    }\n  }]);\n\n  return Login;\n}(React.Component);\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\n\n\nexport default withRouter(Login);","map":{"version":3,"sources":["/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/src/components/login/Login.js"],"names":["React","styled","BaseContainer","api","handleError","User","withRouter","Button","FormContainer","div","Form","InputField","input","Label","label","ButtonContainer","Login","props","state","name","username","password","loggedInUser","requestBody","JSON","stringify","post","response","user","data","localStorage","setItem","token","id","history","push","alert","key","value","setState","e","handleInputChange","target","login","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { BaseContainer } from '../../helpers/layout';\nimport { api, handleError } from '../../helpers/api';\nimport User from '../shared/models/User';\n//import Game from \"../game/Game\";\nimport { withRouter } from 'react-router-dom';\nimport { Button } from '../../views/design/Button';\n\nconst FormContainer = styled.div`\n  margin-top: 2em;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 60%;\n  height: 400px;\n  font-size: 16px;\n  font-weight: 300;\n  padding-left: 37px;\n  padding-right: 37px;\n  border-radius: 5px;\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\n  transition: opacity 0.5s ease, transform 0.5s ease;\n`;\n\nconst InputField = styled.input`\n  &::placeholder {\n    color: rgba(255, 255, 255, 1.0);\n  }\n  height: 35px;\n  padding-left: 15px;\n  margin-left: -4px;\n  border: none;\n  border-radius: 20px;\n  margin-bottom: 20px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n`;\n\nconst Label = styled.label`\n  color: white;\n  margin-bottom: 10px;\n  text-transform: uppercase;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\nclass Login extends React.Component {\n  /**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: null,\n      username: null,\n      password: null,\n      loggedInUser: null\n    };\n  }\n  /**\n   * HTTP POST request is sent to the backend.\n   * If the request is successful, a new user is returned to the front-end\n   * and its token is stored in the localStorage.\n   */\n  async login() {\n    try {\n      const requestBody = JSON.stringify({\n        name: this.state.name,\n        username: this.state.username,\n        password: this.state.password\n      });\n      const response = await api.post('/login', requestBody);\n\n      // Get the returned user and update a new object.\n      const user = new User(response.data);\n\n      // Store the token into the local storage.\n      localStorage.setItem('token', user.token);\n      localStorage.setItem('userId', user.id);\n\n      // Login successfully worked --> navigate to the route /game in the GameRouter\n      this.props.history.push(`/game`);\n    } catch (error) {\n      alert(`Something went wrong during the login: \\n${handleError(error)}`);\n    }\n  }\n\n  /**\n   *  Every time the user enters something in the input field, the state gets updated.\n   * @param key (the key of the state for identifying the field that needs to be updated)\n   * @param value (the value that gets assigned to the identified state key)\n   */\n  handleInputChange(key, value) {\n    // Example: if the key is username, this statement is the equivalent to the following one:\n    // this.setState({'username': value});\n    this.setState({ [key]: value });\n  }\n\n  /**\n   * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n   * Initialization that requires DOM nodes should go here.\n   * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n   * You may call setState() immediately in componentDidMount().\n   * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n   */\n  componentDidMount() {}\n\n  render() {\n    return (\n      <BaseContainer>\n        <FormContainer>\n          <Form>\n            <Label>Username</Label>\n            <InputField\n              placeholder=\"Enter here..\"\n              onChange={e => {\n                this.handleInputChange('username', e.target.value);\n              }}\n            />\n            <Label>Name</Label>\n            <InputField\n                placeholder=\"Enter here..\"\n                onChange={e => {\n                  this.handleInputChange('name', e.target.value);\n                }}\n            />\n            <Label>Password</Label>\n            <InputField\n              placeholder=\"Enter here..\"\n              onChange={e => {\n                this.handleInputChange('password', e.target.value);\n              }}\n            />\n            <ButtonContainer>\n              <Button\n                disabled={!this.state.username || !this.state.password}\n                width=\"50%\"\n                onClick={() => {\n                  this.login();\n                }}\n              >\n                Login\n              </Button>\n            </ButtonContainer>\n            <ButtonContainer>\n              <Button\n                  width=\"50%\"\n                  onClick={() => {\n                    this.props.history.push(`/registration`);\n                  }}\n              >\n                Register here!\n              </Button>\n            </ButtonContainer>\n          </Form>\n        </FormContainer>\n      </BaseContainer>\n    );\n  }\n}\n\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\nexport default withRouter(Login);\n"]},"metadata":{},"sourceType":"module"}