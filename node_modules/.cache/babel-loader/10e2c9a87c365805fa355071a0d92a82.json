{"ast":null,"code":"import _defineProperty from\"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _taggedTemplateLiteral from\"/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject5(){var data=_taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  margin-top: 20px;\\n\"]);_templateObject5=function _templateObject5(){return data;};return data;}function _templateObject4(){var data=_taggedTemplateLiteral([\"\\n  color: white;\\n  margin-bottom: 10px;\\n  text-transform: uppercase;\\n\"]);_templateObject4=function _templateObject4(){return data;};return data;}function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n  &::placeholder {\\n    color: rgba(255, 255, 255, 1.0);\\n  }\\n  height: 35px;\\n  padding-left: 15px;\\n  margin-left: -4px;\\n  border: none;\\n  border-radius: 20px;\\n  margin-bottom: 20px;\\n  background: rgba(255, 255, 255, 0.2);\\n  color: white;\\n\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  width: 60%;\\n  height: 400px;\\n  font-size: 16px;\\n  font-weight: 300;\\n  padding-left: 37px;\\n  padding-right: 37px;\\n  border-radius: 5px;\\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\\n  transition: opacity 0.5s ease, transform 0.5s ease;\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  margin-top: 2em;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  min-height: 300px;\\n  justify-content: center;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React from'react';import styled from'styled-components';import{BaseContainer}from'../../helpers/layout';import{api,handleError}from'../../helpers/api';import User from'../shared/models/User';//import Game from \"../game/Game\";\nimport{withRouter}from'react-router-dom';import{Button}from'../../views/design/Button';var FormContainer=styled.div(_templateObject());var Form=styled.div(_templateObject2());var InputField=styled.input(_templateObject3());var Label=styled.label(_templateObject4());var ButtonContainer=styled.div(_templateObject5());/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */var Login=/*#__PURE__*/function(_React$Component){_inherits(Login,_React$Component);/**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */function Login(props){var _this;_classCallCheck(this,Login);_this=_possibleConstructorReturn(this,_getPrototypeOf(Login).call(this,props));_this.state={name:null,username:null,password:null,loggedInUser:null};return _this;}/**\n   * HTTP POST request is sent to the backend.\n   * If the request is successful, a new user is returned to the front-end\n   * and its token is stored in the localStorage.\n   */_createClass(Login,[{key:\"login\",value:function(){var _login=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var requestBody,response,user;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;requestBody=JSON.stringify({name:this.state.name,username:this.state.username,password:this.state.password});_context.next=4;return api.post('/login',requestBody);case 4:response=_context.sent;// Get the returned user and update a new object.\nuser=new User(response.data);// Store the token into the local storage.\nlocalStorage.setItem('token',user.token);localStorage.setItem('userId',user.id);// Login successfully worked --> navigate to the route /game in the GameRouter\nthis.props.history.push(\"/game\");_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);alert(\"Something went wrong during the login: \\n\".concat(handleError(_context.t0)));case 14:case\"end\":return _context.stop();}}},_callee,this,[[0,11]]);}));function login(){return _login.apply(this,arguments);}return login;}()/**\n   *  Every time the user enters something in the input field, the state gets updated.\n   * @param key (the key of the state for identifying the field that needs to be updated)\n   * @param value (the value that gets assigned to the identified state key)\n   */},{key:\"handleInputChange\",value:function handleInputChange(key,value){// Example: if the key is username, this statement is the equivalent to the following one:\n// this.setState({'username': value});\nthis.setState(_defineProperty({},key,value));}/**\n   * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n   * Initialization that requires DOM nodes should go here.\n   * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n   * You may call setState() immediately in componentDidMount().\n   * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n   */},{key:\"componentDidMount\",value:function componentDidMount(){}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(BaseContainer,null,React.createElement(FormContainer,null,React.createElement(Form,null,React.createElement(Label,null,\"Username\"),React.createElement(InputField,{placeholder:\"Enter here..\",onChange:function onChange(e){_this2.handleInputChange('username',e.target.value);}}),React.createElement(Label,null,\"Name\"),React.createElement(InputField,{placeholder:\"Enter here..\",onChange:function onChange(e){_this2.handleInputChange('name',e.target.value);}}),React.createElement(Label,null,\"Password\"),React.createElement(InputField,{placeholder:\"Enter here..\",onChange:function onChange(e){_this2.handleInputChange('password',e.target.value);}}),React.createElement(ButtonContainer,null,React.createElement(Button,{disabled:!this.state.username||!this.state.password||!this.state.name,width:\"75%\",onClick:function onClick(){_this2.login();}},\"Login\")),React.createElement(ButtonContainer,null,React.createElement(Button,{width:\"75%\",onClick:function onClick(){_this2.props.history.push(\"/registration\");}},\"You don't have an account yet? Register here!\")))));}}]);return Login;}(React.Component);/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */export default withRouter(Login);","map":{"version":3,"sources":["/Users/luisknufinke/Documents/UZH/04 - FS20/Softwarepraktikum/Milestone 1 Individual/sopra-fs20-client/src/components/login/Login.js"],"names":["React","styled","BaseContainer","api","handleError","User","withRouter","Button","FormContainer","div","Form","InputField","input","Label","label","ButtonContainer","Login","props","state","name","username","password","loggedInUser","requestBody","JSON","stringify","post","response","user","data","localStorage","setItem","token","id","history","push","alert","key","value","setState","e","handleInputChange","target","login","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { BaseContainer } from '../../helpers/layout';\nimport { api, handleError } from '../../helpers/api';\nimport User from '../shared/models/User';\n//import Game from \"../game/Game\";\nimport { withRouter } from 'react-router-dom';\nimport { Button } from '../../views/design/Button';\n\nconst FormContainer = styled.div`\n  margin-top: 2em;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 60%;\n  height: 400px;\n  font-size: 16px;\n  font-weight: 300;\n  padding-left: 37px;\n  padding-right: 37px;\n  border-radius: 5px;\n  background: linear-gradient(rgb(27, 124, 186), rgb(2, 46, 101));\n  transition: opacity 0.5s ease, transform 0.5s ease;\n`;\n\nconst InputField = styled.input`\n  &::placeholder {\n    color: rgba(255, 255, 255, 1.0);\n  }\n  height: 35px;\n  padding-left: 15px;\n  margin-left: -4px;\n  border: none;\n  border-radius: 20px;\n  margin-bottom: 20px;\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n`;\n\nconst Label = styled.label`\n  color: white;\n  margin-bottom: 10px;\n  text-transform: uppercase;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\n/**\n * Classes in React allow you to have an internal state within the class and to have the React life-cycle for your component.\n * You should have a class (instead of a functional component) when:\n * - You need an internal state that cannot be achieved via props from other parent components\n * - You fetch data from the server (e.g., in componentDidMount())\n * - You want to access the DOM via Refs\n * https://reactjs.org/docs/react-component.html\n * @Class\n */\nclass Login extends React.Component {\n  /**\n   * If you don’t initialize the state and you don’t bind methods, you don’t need to implement a constructor for your React component.\n   * The constructor for a React component is called before it is mounted (rendered).\n   * In this case the initial state is defined in the constructor. The state is a JS object containing two fields: name and username\n   * These fields are then handled in the onChange() methods in the resp. InputFields\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: null,\n      username: null,\n      password: null,\n      loggedInUser: null\n    };\n  }\n  /**\n   * HTTP POST request is sent to the backend.\n   * If the request is successful, a new user is returned to the front-end\n   * and its token is stored in the localStorage.\n   */\n  async login() {\n    try {\n      const requestBody = JSON.stringify({\n        name: this.state.name,\n        username: this.state.username,\n        password: this.state.password\n      });\n      const response = await api.post('/login', requestBody);\n\n      // Get the returned user and update a new object.\n      const user = new User(response.data);\n\n      // Store the token into the local storage.\n      localStorage.setItem('token', user.token);\n      localStorage.setItem('userId', user.id);\n\n      // Login successfully worked --> navigate to the route /game in the GameRouter\n      this.props.history.push(`/game`);\n    } catch (error) {\n      alert(`Something went wrong during the login: \\n${handleError(error)}`);\n    }\n  }\n\n  /**\n   *  Every time the user enters something in the input field, the state gets updated.\n   * @param key (the key of the state for identifying the field that needs to be updated)\n   * @param value (the value that gets assigned to the identified state key)\n   */\n  handleInputChange(key, value) {\n    // Example: if the key is username, this statement is the equivalent to the following one:\n    // this.setState({'username': value});\n    this.setState({ [key]: value });\n  }\n\n  /**\n   * componentDidMount() is invoked immediately after a component is mounted (inserted into the tree).\n   * Initialization that requires DOM nodes should go here.\n   * If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n   * You may call setState() immediately in componentDidMount().\n   * It will trigger an extra rendering, but it will happen before the browser updates the screen.\n   */\n  componentDidMount() {}\n\n  render() {\n    return (\n      <BaseContainer>\n        <FormContainer>\n          <Form>\n            <Label>Username</Label>\n            <InputField\n              placeholder=\"Enter here..\"\n              onChange={e => {\n                this.handleInputChange('username', e.target.value);\n              }}\n            />\n            <Label>Name</Label>\n            <InputField\n                placeholder=\"Enter here..\"\n                onChange={e => {\n                  this.handleInputChange('name', e.target.value);\n                }}\n            />\n            <Label>Password</Label>\n            <InputField\n              placeholder=\"Enter here..\"\n              onChange={e => {\n                this.handleInputChange('password', e.target.value);\n              }}\n            />\n            <ButtonContainer>\n              <Button\n                disabled={!this.state.username || !this.state.password || !this.state.name}\n                width=\"75%\"\n                onClick={() => {\n                  this.login();\n                }}\n              >\n                Login\n              </Button>\n            </ButtonContainer>\n            <ButtonContainer>\n              <Button\n                  width=\"75%\"\n                  onClick={() => {\n                    this.props.history.push(`/registration`);\n                  }}\n              >\n                You don't have an account yet? Register here!\n              </Button>\n            </ButtonContainer>\n          </Form>\n        </FormContainer>\n      </BaseContainer>\n    );\n  }\n}\n\n/**\n * You can get access to the history object's properties via the withRouter.\n * withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.\n */\nexport default withRouter(Login);\n"]},"metadata":{},"sourceType":"module"}